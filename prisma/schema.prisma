generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  name     String  @db.VarChar(30)
  email    String  @unique
  password String
  isActive Boolean @default(true)
  phone    String  @db.VarChar(11)
  group    String  @db.Char(1)

  RefreshToken RefreshToken[]
  parkManager ParkManager[]
  guide Guide[]
  parkVisit ParkVisit[]
  adminSW AdminSW[]
}

model AdminSW {
  id Int @id @default(autoincrement())

  userId Int
  user User @relation(fields: [userId], references: [id])

  parkManager ParkManager[]
}

model RefreshToken {
  id        String @id @default(uuid())
  expiresIn Int
  user      User   @relation(fields: [userId], references: [id])
  userId    Int
}

model Institution {
  id         Int    @id @default(autoincrement())
  institutionName String @db.VarChar(60)

  parkManager ParkManager[]
}

model Park {
  id          Int    @id @default(autoincrement())
  lawNumber   String @db.VarChar(60)
  description String @db.VarChar(150)
  site        String @db.VarChar(40)
  parkImage   Bytes  @db.ByteA

  openingHours OpeningHours[]
  parkLocalization ParkLocalization[]
  parkGuide ParkGuide[]
  activity Activity[]
  parkInfrastructure ParkInfrastructure[]
  event Event[]
  parkForestType ParkForestType[]
  goodPractice GoodPractice[]
  parkManager ParkManager[]
  parkVisit ParkVisit[]
}

model OpeningHours {
  id        Int      @id @default(autoincrement())
  dayWeek   String   @db.Char(1)
  startTime DateTime @db.Time()
  endTime   DateTime @db.Time()

  parkId Int
  park Park @relation(fields: [parkId], references: [id])
}

model ParkLocalization {
  id Int @id @default(autoincrement())
  street String @db.VarChar(40)
  number String @db.VarChar(6)
  zipCode String @db.VarChar(8)
  publicPlace String @db.VarChar(10)
  city String @db.VarChar(50)
  state String @db.VarChar(2)
  neighborhood String @db.VarChar(40)
  core String @db.VarChar(30)

  parkId Int
  park Park @relation(fields: [parkId], references: [id])
}

model ParkManager {
  id             Int    @id @default(autoincrement())
  cpf            String @db.VarChar(11) @unique
  rg             String @db.VarChar(9)
  parkBond       Bytes  @db.ByteA
  fullName       String @db.VarChar(60)
  approvalStatus String @db.Char(1)

  parkId    Int
  userId    Int
  institutionId  Int
  adminSWId Int
  park Park @relation(fields: [parkId], references: [id])
  user User @relation(fields: [userId], references: [id])
  institution Institution @relation(fields: [institutionId], references: [id])
  adminSW AdminSW @relation(fields: [adminSWId], references: [id])

  guide Guide[]
  
}

model Guide {
  id             Int      @id @default(autoincrement())
  gender         String   @db.Char(1)
  biography      String   @db.VarChar(150)
  nickname       String   @db.VarChar(15)
  birthDate      DateTime @db.Date
  approvalStatus String   @db.Char(1)
  guideImage     Bytes    @db.ByteA

  userId        Int
  parkManagerId Int
  user User @relation(fields: [userId], references: [id])
  parkManager ParkManager @relation(fields: [parkManagerId], references: [id])

  parkGuide ParkGuide[]
  languageGuide LanguageGuide[]
  specialtyGuide SpecialtyGuide[]
}

model Language {
  id           Int    @id @default(autoincrement())
  languageName String @db.VarChar(30)

  languageGuide LanguageGuide[]
}

model LanguageGuide {
  id           Int    @id @default(autoincrement())
  fluencyLevel String @db.Char(1)

  languageId Int
  guideId    Int
  language Language @relation(fields: [languageId], references: [id])
  guide Guide @relation(fields: [guideId], references: [id])
}

model Specialty {
  id            Int    @id @default(autoincrement())
  specialtyName String @db.VarChar(30)

  specialtyGuide SpecialtyGuide[]
}

model SpecialtyGuide {
  id Int @id @default(autoincrement())

  specialtyId Int
  guideId     Int
  specialty Specialty @relation(fields: [specialtyId], references: [id])
  guide Guide @relation(fields: [guideId], references: [id])
}

model ParkGuide {
  id Int @id @default(autoincrement())

  parkId Int
  guideId Int

  park Park @relation(fields: [parkId], references: [id])
  guide Guide @relation(fields: [guideId], references: [id])
}

model Activity {
  id Int @id @default(autoincrement())
  percurso Float @db.DoublePrecision
  duracao Float @db.DoublePrecision
  description String @db.VarChar(60)
  isMonitored Boolean 
  difficultyLevel String @db.Char(1)
  activityName String @db.VarChar(40)
  activityImage String @db.VarChar(30)

  parkId Int
  park Park @relation(fields: [parkId], references: [id])

}

model Infrastructure {
  id Int @id @default(autoincrement())
  type String @db.VarChar(40)

  parkInfrastructure ParkInfrastructure[]
}

model ParkInfrastructure {
  id Int @id @default(autoincrement())
  status Boolean

  parkId Int
  infrastructureId Int
  park Park @relation(fields: [parkId], references: [id])
  infrastructure Infrastructure @relation(fields: [infrastructureId], references: [id])
}

model Event {
  id Int @id @default(autoincrement())
  event_name String @db.VarChar(30)
  description String @db.VarChar()
  start_date DateTime @db.Date
  end_date DateTime @db.Date
  locationRef String @db.VarChar(30)
  eventImage Bytes @db.ByteA

  parkId Int
  park Park @relation(fields: [parkId], references: [id])
}

model ForestType {
  id Int @id @default(autoincrement())
  name String @db.VarChar(40)

  parkForestType ParkForestType[]
}

model ParkForestType {
  id Int @id @default(autoincrement())
  
  parkId Int
  forestTypeId Int
  park Park @relation(fields: [parkId], references: [id])
  forestType ForestType @relation(fields: [forestTypeId], references: [id])
}

model GoodPractice {
  id Int @id @default(autoincrement())
  title String @db.VarChar(130)
  practiceImage Bytes @db.ByteA
  
  parkId Int
  park Park @relation(fields: [parkId], references: [id])
}

model ParkVisit {
  id Int @id @default(autoincrement())

  parkId Int
  userId Int
  park Park @relation(fields: [parkId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

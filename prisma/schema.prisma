generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Groups {
  ADMINISTRADOR @map("1")
  VISITANTE     @map("2")
  GERENTE       @map("3")
  GUIA          @map("4")
}

enum ApprovalStatus {
  PENDENTE  @map("1")
  APROVADO  @map("2")
  REPROVADO @map("3")
}

enum Gender {
  FEMININO      @map("1")
  MASCULINO     @map("2")
  NAO_RESPONDER @map("3")
}

enum DifficultyLevel {
  FACIL   @map("1")
  MEDIO   @map("2")
  DIFICIL @map("3")
}

enum DayWeek {
  SEGUNDA @map("1")
  TERCA   @map("2")
  QUARTA  @map("3")
  QUINTA  @map("4")
  SEXTA   @map("5")
  SABADO  @map("6")
  DOMINGO @map("7")
}

model User {
  id       Int     @id @default(autoincrement())
  name     String? @db.VarChar(500)
  email    String  @unique
  password String
  isActive Boolean @default(true)
  phone    String? @db.VarChar(500)
  group    Groups

  RefreshToken  RefreshToken[]
  managedParks  ParkManager[]  @relation("UserParkManager")
  user_managers ParkManager[]  @relation("ManagerParkManager")
  guide         Guide[]
  parkVisit     ParkVisit[]
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @db.VarChar(200)
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  expiresIn DateTime
}

model Park {
  id           Int     @id @default(autoincrement())
  park_name    String  @db.VarChar(500)
  description  String? @db.VarChar(1000)
  site         String? @db.VarChar(500)
  parkImage    String? @db.VarChar(500)
  street       String? @db.VarChar(500)
  number       String? @db.VarChar(500)
  zipCode      String? @db.VarChar(500)
  publicPlace  String? @db.VarChar(500)
  city         String? @db.VarChar(500)
  state        String? @db.VarChar(500)
  neighborhood String? @db.VarChar(500)
  core         String? @db.VarChar(500)

  openingHours       OpeningHours[]
  parkGuide          ParkGuide[]
  activity           Activity[]
  parkInfrastructure ParkInfrastructure[]
  event              Event[]
  parkForestType     ParkForestType[]
  goodPractice       GoodPractice[]
  parkManager        ParkManager[]
  parkVisit          ParkVisit[]
}

model OpeningHours {
  id        Int      @id @default(autoincrement())
  dayWeek   DayWeek
  startTime DateTime @db.Time()
  endTime   DateTime @db.Time()

  parkId Int
  park   Park @relation(fields: [parkId], references: [id])
}

model ParkManager {
  id             Int            @id @default(autoincrement())
  cpf            String?        @unique @db.VarChar(11)
  rg             String?        @db.VarChar(9)
  approvalStatus ApprovalStatus
  parkId         Int
  userId         Int
  userManagerId  Int?
  park           Park           @relation(fields: [parkId], references: [id])
  user           User           @relation("UserParkManager", fields: [userId], references: [id])
  userManager    User?          @relation("ManagerParkManager", fields: [userManagerId], references: [id])

  guide Guide[]
}

model Guide {
  id             Int            @id @default(autoincrement())
  gender         Gender
  biography      String         @db.VarChar(150)
  nickname       String         @db.VarChar(15)
  birthDate      DateTime       @db.Date
  approvalStatus ApprovalStatus
  guideImage     String         @db.VarChar(150)

  userId        Int
  parkManagerId Int?
  user          User         @relation(fields: [userId], references: [id])
  parkManager   ParkManager? @relation(fields: [parkManagerId], references: [id])

  parkGuide      ParkGuide[]
  languageGuide  LanguageGuide[]
  specialtyGuide SpecialtyGuide[]
}

model Language {
  id           Int    @id @default(autoincrement())
  languageName String @db.VarChar(30)

  languageGuide LanguageGuide[]
}

model LanguageGuide {
  id         Int      @id @default(autoincrement())
  languageId Int
  guideId    Int
  language   Language @relation(fields: [languageId], references: [id])
  guide      Guide    @relation(fields: [guideId], references: [id])
}

model Specialty {
  id            Int    @id @default(autoincrement())
  specialtyName String @db.VarChar(30)

  specialtyGuide SpecialtyGuide[]
}

model SpecialtyGuide {
  id Int @id @default(autoincrement())

  specialtyId Int
  guideId     Int
  specialty   Specialty @relation(fields: [specialtyId], references: [id])
  guide       Guide     @relation(fields: [guideId], references: [id])
}

model ParkGuide {
  id Int @id @default(autoincrement())

  parkId  Int
  guideId Int

  park  Park  @relation(fields: [parkId], references: [id])
  guide Guide @relation(fields: [guideId], references: [id])
}

model Activity {
  id              Int             @id @default(autoincrement())
  percurso        Float           @db.DoublePrecision
  duracao         Float           @db.DoublePrecision
  description     String          @db.VarChar(500)
  isMonitored     Boolean
  difficultyLevel DifficultyLevel
  activityName    String          @db.VarChar(500)
  activityImage   String          @db.VarChar(500)

  parkId Int
  park   Park @relation(fields: [parkId], references: [id])
}

model Infrastructure {
  id   Int    @id @default(autoincrement())
  type String @db.VarChar(40)

  parkInfrastructure ParkInfrastructure[]
}

model ParkInfrastructure {
  id     Int     @id @default(autoincrement())
  status Boolean

  parkId           Int
  infrastructureId Int
  park             Park           @relation(fields: [parkId], references: [id])
  infrastructure   Infrastructure @relation(fields: [infrastructureId], references: [id])
}

model Event {
  id          Int      @id @default(autoincrement())
  event_name  String   @db.VarChar(500)
  description String   @db.VarChar(1000)
  start_date  DateTime @db.Date
  end_date    DateTime @db.Date
  locationRef String   @db.VarChar(500)
  eventImage  String   @db.VarChar(500)

  parkId Int
  park   Park @relation(fields: [parkId], references: [id])
}

model ForestType {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(40)

  parkForestType ParkForestType[]
}

model ParkForestType {
  id Int @id @default(autoincrement())

  parkId       Int
  forestTypeId Int
  park         Park       @relation(fields: [parkId], references: [id])
  forestType   ForestType @relation(fields: [forestTypeId], references: [id])
}

model GoodPractice {
  id            Int    @id @default(autoincrement())
  title         String @db.VarChar(500)
  practiceImage String @db.VarChar(500)

  parkId Int
  park   Park @relation(fields: [parkId], references: [id])
}

model ParkVisit {
  id Int @id @default(autoincrement())

  parkId Int
  userId Int
  park   Park @relation(fields: [parkId], references: [id])
  user   User @relation(fields: [userId], references: [id])
}
